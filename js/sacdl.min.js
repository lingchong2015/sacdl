var Utils=function(){function n(){var n={},a={name:"languages",children:[]};if(e&&e.items){var r=e.items;r.forEach(function(e,a){"undefined"==typeof n[e.language]&&(n[e.language]=a)});for(var t in n){"null"===t&&(t="others");var u={name:t,children:[]};r.forEach(function(n,e){var a={name:n.full_name,watchers_count:n.watchers_count,forks_count:n.forks_count};(n.language===t||"null"===n.language&&"others"===t)&&u.children.push(a)}),a.children.push(u)}}return a}var e,a;return{getData:function(r){e=r,a=n()},getBarData:function(){var n=a.children,e={labels:[],series:[]},r=[];return n.forEach(function(n){e.labels.push(n.name),r.push(n.children.length)}),e.series.push({label:"Projects count",values:r}),e},getStackData:function(){var n=a.children,e={name:"repos",languages:[]};return n.forEach(function(n){if("null"!==n.name){var a={language:n.name,count:n.children.length};e.languages.push(a)}}),[e]},getTreeData:function(){return a}}}();
var Searcher=function(){function t(){o.q=r.property("value")||"bitcoin";var t=[];for(var n in o)t.push(n+"="+o[n]);return s=e+"?"+t.join("&"),console.log(s),i.text("当前搜索地址: "+s),s}var e,r,n,i,s="",c=[],o={q:"bitcoin",sort:"forks",order:"desc",per_page:100};return{settings:{baseApiUrl:"https://api.github.com/search/repositories"},init:function(){r=d3.select("#search-input"),n=d3.select("#search-btn"),i=d3.select("#search-msg"),e=this.settings.baseApiUrl,n.on("click",function(){t(),c.forEach(function(t){try{t(s)}catch(e){console.log(e)}})})},addListener:function(t){c.push(t)}}}();
var Bar=function(){function t(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)u.push(t.series[r].values[e])}function e(){u=[],a=Utils.getBarData(),i=l*a.series.length,t(a);var e=d3.scale.category20(),r=l*u.length+c*a.labels.length,g=d3.scale.linear().domain([0,d3.max(u)]).range([0,s]),h=d3.scale.linear().range([r+c,0]);n=d3.svg.axis().scale(h).tickFormat("").tickSize(0).orient("left");var f=chart.attr("width",o+s+d).attr("height",r),p=f.selectAll("g").data(u,function(t,e){return[t,e]}),x=p.enter().append("g").attr("transform",function(t,e){return"translate("+o+","+(e*l+c*(.5+Math.floor(e/a.series.length)))+")"});x.append("rect").attr("fill",function(t,r){return e(r%a.series.length)}).attr("class","bar").attr("width",g).attr("height",l-1),x.append("text").attr("x",function(t){return g(t)-3}).attr("y",l/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),x.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",i/2).attr("dy",".35em").text(function(t,e){return e%a.series.length===0?a.labels[Math.floor(e/a.series.length)]:""}),p.exit().transition().style({opacity:0}).remove(),f.append("g").attr("class","y axis").attr("transform","translate("+o+", "+-c/2+")").call(n);var b=18,v=4,y=f.selectAll(".legend").data(a.series),m=y.enter().append("g").attr("transform",function(t,e){var r=b+v,a=-c/2,n=o+s+40-b,l=e*r-a;return"translate("+n+","+l+")"});m.append("rect").attr("width",b).attr("height",b).style("fill",function(t,r){return e(r)}).style("stroke",function(t,r){return e(r)}),m.append("text").attr("class","legend").attr("x",b+v).attr("y",b-v).text(function(t){return t.label}),y.exit().remove()}var r,a,n,s=300,l=20,i=0,c=10,o=150,d=150,u=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){r=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(r).append("svg").attr("class","chart")},show:function(){e()}}}();
var Treemap=function(){function t(t){p=f=Utils.getTreeData(t);var a=i.nodes(f).filter(function(t){return!t.children}),s=c.selectAll("g").data(a,function(t){return t.watchers_count}).enter().append("g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return r(p==t.parent?f:t.parent)});s.append("rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return d(t.parent.name)}),s.append("text").attr("x",function(t){return 2*t.dx/3+20}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name}).style("opacity",function(t){return t.w=this.getComputedTextLength(),1}),c.selectAll("g").data(a).exit().transition().style({opacity:0}).remove(),d3.select(window).on("click",function(){r(f)}),d3.select("#treemapSelect").on("change",function(){i.value("watchers"==this.value?e:n).nodes(f),r(p)})}function e(t){return t.watchers_count}function n(t){return t.forks_count}function r(t){var e=s/t.dx,n=o/t.dy;u.domain([t.x,t.x+t.dx]),l.domain([t.y,t.y+t.dy]);var r=c.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+u(t.x)+","+l(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return 2*e*t.dx/3+20}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return 1}),p=t,d3.event.stopPropagation()}var a,i,c,s=970,o=500,u=d3.scale.linear().range([0,s]),l=d3.scale.linear().range([0,o]),d=d3.scale.category20c(),f=[],p=[];return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),a=d3.select(t).append("div").attr("class","chart").style("width",s+"px").style("height",o+"px"),c=a.append("svg").attr("width",s).attr("height",o).append("g").attr("transform","translate(.5,.5)"),i=d3.layout.treemap().size([s,o]).value(function(t){return t.watchers_count})},show:function(e){t(e)}}}();
!function(){function e(e){var a=setTimeout(function(){t.style.display="block"},300);e=e||"https://api.github.com/search/repositories?q=bitcoin&sort=forks&order=desc&per_page=100",d3.json(e,function(e,i){e&&(clearTimeout(a),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.getData(i),Bar.show(),Treemap.show(),clearTimeout(a),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),Searcher.addListener(function(t){e(t)}),e()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwic2VhcmNoZXIuanMiLCJiYXIuanMiLCJ0cmVlbWFwLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwiZGF0YVRvSnNvbiIsImxhbmd1YWdlcyIsInJlc3VsdCIsIm5hbWUiLCJjaGlsZHJlbiIsImRhdGFTZXQiLCJpdGVtcyIsImZvckVhY2giLCJpdGVtIiwiaW5kZXgiLCJsYW5ndWFnZSIsInJvb3QiLCJjaGlsZCIsImZ1bGxfbmFtZSIsIndhdGNoZXJzX2NvdW50IiwiZm9ya3NfY291bnQiLCJwdXNoIiwidHJlZURhdGEiLCJnZXREYXRhIiwiZGF0YSIsImdldEJhckRhdGEiLCJsYWJlbHMiLCJzZXJpZXMiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJsYWJlbCIsImdldFN0YWNrRGF0YSIsImNvdW50IiwiZ2V0VHJlZURhdGEiLCJTZWFyY2hlciIsInBhcnNlUXVlcnkiLCJxdWVyeSIsInEiLCJpbnB1dFR4dCIsInByb3BlcnR5IiwiYXJyIiwia2V5IiwidXJsIiwiYmFzZUFwaVVybCIsImpvaW4iLCJjb25zb2xlIiwibG9nIiwic2VhcmNoTXNnIiwidGV4dCIsInNlYXJjaEJ0biIsImxpc3RlbmVycyIsInNvcnQiLCJvcmRlciIsInBlcl9wYWdlIiwic2V0dGluZ3MiLCJpbml0IiwiZDMiLCJzZWxlY3QiLCJ0aGlzIiwib24iLCJsaXN0ZW5lciIsImVycm9yIiwiYWRkTGlzdGVuZXIiLCJCYXIiLCJ6aXBwaW5nRGF0YSIsImkiLCJqIiwiemlwcGVkRGF0YSIsInNob3dCYXIiLCJncm91cEhlaWdodCIsImJhckhlaWdodCIsImNvbG9yIiwic2NhbGUiLCJjYXRlZ29yeTIwIiwiY2hhcnRIZWlnaHQiLCJnYXBCZXR3ZWVuR3JvdXBzIiwieCIsImxpbmVhciIsImRvbWFpbiIsIm1heCIsInJhbmdlIiwiY2hhcnRXaWR0aCIsInkiLCJ5QXhpcyIsInN2ZyIsImF4aXMiLCJ0aWNrRm9ybWF0IiwidGlja1NpemUiLCJvcmllbnQiLCJjaGFydCIsImF0dHIiLCJzcGFjZUZvckxhYmVscyIsInNwYWNlRm9yTGVnZW5kIiwiYmFyTm9kZXMiLCJzZWxlY3RBbGwiLCJkIiwiYmFyIiwiZW50ZXIiLCJhcHBlbmQiLCJNYXRoIiwiZmxvb3IiLCJleGl0IiwidHJhbnNpdGlvbiIsInN0eWxlIiwib3BhY2l0eSIsInJlbW92ZSIsImNhbGwiLCJsZWdlbmRSZWN0U2l6ZSIsImxlZ2VuZFNwYWNpbmciLCJsZWdlbmREYXRhIiwibGVnZW5kIiwiaGVpZ2h0Iiwib2Zmc2V0IiwiaG9yeiIsInZlcnQiLCJiYXJJZCIsInRpdGxlIiwiZGVzYyIsInNob3ciLCJUcmVlbWFwIiwic2hvd0NoYXJ0Iiwibm9kZSIsIm5vZGVzIiwidHJlZW1hcCIsImZpbHRlciIsImNlbGwiLCJ6b29tIiwicGFyZW50IiwiZHgiLCJkeSIsInciLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJ3aW5kb3ciLCJ2YWx1ZSIsIndhdGNoZXJzQ291bnQiLCJmb3Jrc0NvdW50Iiwia3giLCJreSIsImgiLCJ0IiwiZHVyYXRpb24iLCJldmVudCIsImFsdEtleSIsInN0b3BQcm9wYWdhdGlvbiIsImNhdGVnb3J5MjBjIiwidHJlZW1hcElkIiwibGF5b3V0Iiwic2l6ZSIsImxvYWRlciIsInNldFRpbWVvdXQiLCJsb2FkaW5nIiwiZGlzcGxheSIsImpzb24iLCJlcnIiLCJjbGVhclRpbWVvdXQiLCJhbGVydCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJBQUNBLEdBQUlBLE9BQVMsV0ErRlQsUUFBU0MsS0FDTCxHQUFJQyxNQUVBQyxHQUNBQyxLQUFRLFlBQ1JDLFlBR0osSUFBSUMsR0FBV0EsRUFBUUMsTUFBTyxDQUMxQixHQUFJQSxHQUFRRCxFQUFRQyxLQUVwQkEsR0FBTUMsUUFBUSxTQUFVQyxFQUFNQyxHQUNjLG1CQUE3QlIsR0FBVU8sRUFBS0UsWUFDdEJULEVBQVVPLEVBQUtFLFVBQVlELElBSW5DLEtBQUssR0FBSUMsS0FBWVQsR0FBVyxDQUNYLFNBQWJT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QkksUUFBUzhGLEdBQUs1RSxHQUNWLEdBQUkwRyxHQUFTQyxXQUFXLFdBQ3BCQyxFQUFRL0MsTUFBTWdELFFBQVUsU0FDekIsSUFFSDdHLEdBQU1BLEdBQU8sMEZBRWJjLEdBQUdnRyxLQUFLOUcsRUFBSyxTQUFTK0csRUFBS2pJLEdBQ25CaUksSUFDQUMsYUFBYU4sR0FDYkUsRUFBUS9DLE1BQU1nRCxRQUFVLE9BQ3hCSSxNQUFNLHNCQUdWdkosTUFBTW1CLFFBQVFDLEdBRWR1QyxJQUFJdUQsT0FDSkMsUUFBUUQsT0FFUm9DLGFBQWFOLEdBQ2JFLEVBQVEvQyxNQUFNZ0QsUUFBVSxTQS9DaEMsR0FBSUQsR0FBVU0sU0FBU0MsZUFBZSxRQUt0QzNILFVBQVNxQixPQUtUUSxJQUFJVCxVQUNBOEQsTUFBTyxrQkFDUEMsS0FBTSwwQkFDTkYsTUFBTyxVQUVYcEQsSUFBSVIsT0FLSmdFLFFBQVFqRSxVQUNKOEQsTUFBTyxpQkFDUEMsS0FBTSxzQ0FDTjRCLFVBQVcsaUJBRWYxQixRQUFRaEUsT0EwQlJyQixTQUFTNEIsWUFBWSxTQUFTcEIsR0FDMUI0RSxFQUFLNUUsS0FHVDRFIiwiZmlsZSI6InNhY2RsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOaooeWdl+WMlue8lueoi+ekuuiMg+OAglxyXG52YXIgVXRpbHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8g5bGA6YOo5Y+Y6YeP5a6a5LmJ44CCXHJcbiAgICB2YXIgZGF0YVNldCwgdHJlZURhdGE7XHJcblxyXG4gICAgLy8g5YWs5YWx5pa55rOV77yM5pys5L6L5Lit5YyF5ZCr5LqGZ2V0RGF0YSgp44CBZ2V0QmFyRGF0YSgp44CBZ2V0U3RhY2tEYXRhKCnkuI5nZXRUcmVlRGF0YSgp44CCXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldERhdGE6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGFTZXQgPSBkYXRhO1xyXG4gICAgICAgICAgICB0cmVlRGF0YSA9IGRhdGFUb0pzb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgRGF0YSBmb3JtYXQ6XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbHM6IFtcclxuICAgICAgICAgICAgICAgICdjL2MrKycsICdweXRob24nLCAnamF2YXNjcmlwdCcsXHJcbiAgICAgICAgICAgICAgICAnamF2YScsICdydWJ5JywgJ2h0bWwnXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnUHJvamVjdHMgY291bnQnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbNCwgOCwgMTUsIDE2LCAyMywgNDJdIC8vY291bnRzXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgZ2V0QmFyRGF0YTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0cmVlRGF0YS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczogW10sXHJcbiAgICAgICAgICAgICAgICBzZXJpZXM6IFtdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5sYWJlbHMucHVzaChpdGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goaXRlbS5jaGlsZHJlbi5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgcmVzdWx0LnNlcmllcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnUHJvamVjdHMgY291bnQnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXNcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgIHsgbmFtZTogXCJyZXBvc1wiICwgXHJcbiAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXM6IFsgIHsgbGFuZ3VhZ2U6ICdqcycsIGNvdW50OiAzMDAwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBsYW5ndWFnZTogJ3J1YnknLCBjb3VudDogMTMwMCB9XVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgIGdldFN0YWNrRGF0YTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0cmVlRGF0YS5jaGlsZHJlbjtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcInJlcG9zXCIsXHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZXM6IFtdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vMS4g56Gu5a6a5Yid5aeL5pWw5o2uXHJcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLm5hbWUgPT09IFwibnVsbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IGl0ZW0uY2hpbGRyZW4ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5sYW5ndWFnZXMucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gW3Jlc3VsdF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKiogRGF0YSBmb3JtYXQ6XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJsYW5ndWFnZXNcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImphdmFzY3JpcHRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1mbHkvbXlJREVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2F0Y2hlcnNfY291bnRcIjogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmb3Jrc19jb3VudFwiOiA1MFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgIGdldFRyZWVEYXRhOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmVlRGF0YTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy/np4HmnInmlrnms5XvvIzljIXlkKvkuoZkYXRhVG9Kc29uKCnkuI5tZXJnZXRUbygp44CCXHJcbiAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgZnVuY3Rpb24gZGF0YVRvSnNvbigpIHtcclxuICAgICAgICB2YXIgbGFuZ3VhZ2VzID0ge307XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImxhbmd1YWdlc1wiLFxyXG4gICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGF0YVNldCAmJiBkYXRhU2V0Lml0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGRhdGFTZXQuaXRlbXM7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbaXRlbS5sYW5ndWFnZV0gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbaXRlbS5sYW5ndWFnZV0gPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBsYW5ndWFnZSBpbiBsYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gXCJudWxsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSA9IFwib3RoZXJzXCI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByb290ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBsYW5ndWFnZSxcclxuICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogaXRlbS5mdWxsX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2F0Y2hlcnNfY291bnRcIjogaXRlbS53YXRjaGVyc19jb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmb3Jrc19jb3VudFwiOiBpdGVtLmZvcmtzX2NvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ubGFuZ3VhZ2UgPT09IGxhbmd1YWdlIHx8IChpdGVtLmxhbmd1YWdlID09PSBcIm51bGxcIiAmJiBsYW5ndWFnZSA9PT0gXCJvdGhlcnNcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdC5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQuY2hpbGRyZW4ucHVzaChyb290KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtZXJnZVRvKHRvLCBmcm9tKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b1trZXldID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0b1trZXldID0gZnJvbVtrZXldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KCkpXHJcbiIsInZhciBTZWFyY2hlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdXJsID0gJycsXHJcbiAgICAgICAgYmFzZUFwaVVybCxcclxuICAgICAgICBpbnB1dFR4dCxcclxuICAgICAgICBzZWFyY2hCdG4sXHJcbiAgICAgICAgc2VhcmNoTXNnLFxyXG4gICAgICAgIGxpc3RlbmVycyA9IFtdLFxyXG4gICAgICAgIHF1ZXJ5ID0ge1xyXG4gICAgICAgICAgICBxOiAnYml0Y29pbicsXHJcbiAgICAgICAgICAgIHNvcnQ6IFwiZm9ya3NcIixcclxuICAgICAgICAgICAgb3JkZXI6IFwiZGVzY1wiLFxyXG4gICAgICAgICAgICBwZXJfcGFnZTogMTAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIGJhc2VBcGlVcmw6ICdodHRwczovL2FwaS5naXRodWIuY29tL3NlYXJjaC9yZXBvc2l0b3JpZXMnXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbnB1dFR4dCA9IGQzLnNlbGVjdCgnI3NlYXJjaC1pbnB1dCcpO1xyXG4gICAgICAgICAgICBzZWFyY2hCdG4gPSBkMy5zZWxlY3QoJyNzZWFyY2gtYnRuJyk7XHJcbiAgICAgICAgICAgIHNlYXJjaE1zZyA9IGQzLnNlbGVjdCgnI3NlYXJjaC1tc2cnKVxyXG5cclxuICAgICAgICAgICAgYmFzZUFwaVVybCA9IHRoaXMuc2V0dGluZ3MuYmFzZUFwaVVybDtcclxuXHJcbiAgICAgICAgICAgIHNlYXJjaEJ0bi5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJzZVF1ZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcih1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZExpc3RlbmVyOiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VRdWVyeSgpIHtcclxuICAgICAgICBxdWVyeS5xID0gaW5wdXRUeHQucHJvcGVydHkoJ3ZhbHVlJykgfHwgJ2JpdGNvaW4nO1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIGFyci5wdXNoKGtleSArICc9JyArIHF1ZXJ5W2tleV0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHVybCA9IGJhc2VBcGlVcmwgKyAnPycgKyBhcnIuam9pbignJicpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh1cmwpO1xyXG4gICAgICAgIHNlYXJjaE1zZy50ZXh0KCflvZPliY3mkJzntKLlnLDlnYA6ICcgKyB1cmwpO1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbn0oKSlcclxuIiwidmFyIEJhciA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBjaGFydFdpZHRoID0gMzAwLFxyXG4gICAgICAgIGJhckhlaWdodCA9IDIwLFxyXG4gICAgICAgIGdyb3VwSGVpZ2h0ID0gMCxcclxuICAgICAgICBnYXBCZXR3ZWVuR3JvdXBzID0gMTAsXHJcbiAgICAgICAgc3BhY2VGb3JMYWJlbHMgPSAxNTAsXHJcbiAgICAgICAgc3BhY2VGb3JMZWdlbmQgPSAxNTAsXHJcbiAgICAgICAgYmFySWQsXHJcbiAgICAgICAgc3ZnLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgeUF4aXM7XHJcblxyXG4gICAgLy8gWmlwIHRoZSBzZXJpZXMgZGF0YSB0b2dldGhlciAoZmlyc3QgdmFsdWVzLCBzZWNvbmQgdmFsdWVzLCBldGMuKVxyXG4gICAgdmFyIHppcHBlZERhdGEgPSBbXTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJhclRpdGxlXCIsXHJcbiAgICAgICAgICAgIGRlc2M6IFwiYmFyRGVzY1wiLFxyXG4gICAgICAgICAgICBiYXJJZDogXCIjYmFySWRcIlxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBiYXJJZCA9IHRoaXMuc2V0dGluZ3MuYmFySWQ7XHJcblxyXG4gICAgICAgICAgICBkMy5zZWxlY3QoXCIjYmFyVGl0bGVcIikudGV4dCh0aGlzLnNldHRpbmdzLnRpdGxlKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI2JhckRlc2NcIikudGV4dCh0aGlzLnNldHRpbmdzLmRlc2MpO1xyXG5cclxuICAgICAgICAgICAgY2hhcnQgPSBkMy5zZWxlY3QoYmFySWQpLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzaG93QmFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHppcHBpbmdEYXRhKGRhdGEpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGFiZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5zZXJpZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHppcHBlZERhdGEucHVzaChkYXRhLnNlcmllc1tqXS52YWx1ZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNob3dCYXIoKSB7XHJcbiAgICAgICAgLy9DbGVhblxyXG4gICAgICAgIHppcHBlZERhdGEgPSBbXTtcclxuXHJcbiAgICAgICAgZGF0YSA9IFV0aWxzLmdldEJhckRhdGEoKTtcclxuICAgICAgICBncm91cEhlaWdodCA9IGJhckhlaWdodCAqIGRhdGEuc2VyaWVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgemlwcGluZ0RhdGEoZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIENvbG9yIHNjYWxlXHJcbiAgICAgICAgdmFyIGNvbG9yID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpO1xyXG4gICAgICAgIHZhciBjaGFydEhlaWdodCA9IGJhckhlaWdodCAqIHppcHBlZERhdGEubGVuZ3RoICsgZ2FwQmV0d2Vlbkdyb3VwcyAqIGRhdGEubGFiZWxzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgdmFyIHggPSBkMy5zY2FsZS5saW5lYXIoKVxyXG4gICAgICAgICAgICAuZG9tYWluKFswLCBkMy5tYXgoemlwcGVkRGF0YSldKVxyXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGNoYXJ0V2lkdGhdKTtcclxuXHJcbiAgICAgICAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKVxyXG4gICAgICAgICAgICAucmFuZ2UoW2NoYXJ0SGVpZ2h0ICsgZ2FwQmV0d2Vlbkdyb3VwcywgMF0pO1xyXG5cclxuICAgICAgICB5QXhpcyA9IGQzLnN2Zy5heGlzKClcclxuICAgICAgICAgICAgLnNjYWxlKHkpXHJcbiAgICAgICAgICAgIC50aWNrRm9ybWF0KCcnKVxyXG4gICAgICAgICAgICAudGlja1NpemUoMClcclxuICAgICAgICAgICAgLm9yaWVudChcImxlZnRcIik7XHJcblxyXG4gICAgICAgIHZhciBzdmcgPSBjaGFydFxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNwYWNlRm9yTGFiZWxzICsgY2hhcnRXaWR0aCArIHNwYWNlRm9yTGVnZW5kKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjaGFydEhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgbm9kZXNcclxuICAgICAgICB2YXIgYmFyTm9kZXMgPSBzdmcuc2VsZWN0QWxsKFwiZ1wiKS5kYXRhKHppcHBlZERhdGEsIGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbZCwgaV07XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGJhcnNcclxuICAgICAgICB2YXIgYmFyID0gYmFyTm9kZXNcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgc3BhY2VGb3JMYWJlbHMgKyBcIixcIiArIChpICogYmFySGVpZ2h0ICsgZ2FwQmV0d2Vlbkdyb3VwcyAqICgwLjUgKyBNYXRoLmZsb29yKGkgLyBkYXRhLnNlcmllcy5sZW5ndGgpKSkgKyBcIilcIjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSByZWN0YW5nbGVzIG9mIHRoZSBjb3JyZWN0IHdpZHRoXHJcbiAgICAgICAgYmFyLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcihpICUgZGF0YS5zZXJpZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhclwiKVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGJhckhlaWdodCAtIDEpO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGV4dCBsYWJlbCBpbiBiYXJcclxuICAgICAgICBiYXIuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHgoZCkgLSAzO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgYmFySGVpZ2h0IC8gMilcclxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmVkXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxyXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIERyYXcgbGFiZWxzXHJcbiAgICAgICAgYmFyLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZ3JvdXBIZWlnaHQgLyAyKVxyXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjM1ZW1cIilcclxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgJSBkYXRhLnNlcmllcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzW01hdGguZmxvb3IoaSAvIGRhdGEuc2VyaWVzLmxlbmd0aCldO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBEZWxldGUgdGhlIGV4dHJhIG5vZGVzXHJcbiAgICAgICAgYmFyTm9kZXMuZXhpdCgpXHJcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgLnN0eWxlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieSBheGlzXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgc3BhY2VGb3JMYWJlbHMgKyBcIiwgXCIgKyAtZ2FwQmV0d2Vlbkdyb3VwcyAvIDIgKyBcIilcIilcclxuICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xyXG5cclxuICAgICAgICAvLyBEcmF3IGxlZ2VuZFxyXG4gICAgICAgIHZhciBsZWdlbmRSZWN0U2l6ZSA9IDE4LFxyXG4gICAgICAgICAgICBsZWdlbmRTcGFjaW5nID0gNDtcclxuXHJcbiAgICAgICAgdmFyIGxlZ2VuZERhdGEgPSBzdmcuc2VsZWN0QWxsKCcubGVnZW5kJylcclxuICAgICAgICAgICAgLmRhdGEoZGF0YS5zZXJpZXMpO1xyXG5cclxuICAgICAgICB2YXIgbGVnZW5kID0gbGVnZW5kRGF0YVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBsZWdlbmRSZWN0U2l6ZSArIGxlZ2VuZFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gLWdhcEJldHdlZW5Hcm91cHMgLyAyO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhvcnogPSBzcGFjZUZvckxhYmVscyArIGNoYXJ0V2lkdGggKyA0MCAtIGxlZ2VuZFJlY3RTaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZlcnQgPSBpICogaGVpZ2h0IC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGhvcnogKyAnLCcgKyB2ZXJ0ICsgJyknO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGVnZW5kLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGxlZ2VuZFJlY3RTaXplKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgbGVnZW5kUmVjdFNpemUpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcihpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoaSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZWdlbmQuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgbGVnZW5kUmVjdFNpemUgKyBsZWdlbmRTcGFjaW5nKVxyXG4gICAgICAgICAgICAuYXR0cigneScsIGxlZ2VuZFJlY3RTaXplIC0gbGVnZW5kU3BhY2luZylcclxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubGFiZWw7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZWdlbmREYXRhLmV4aXQoKS5yZW1vdmUoKTtcclxuICAgIH1cclxufSgpKVxyXG4iLCJ2YXIgVHJlZW1hcCA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciB3ID0gOTcwLFxyXG4gICAgICAgIGggPSA1MDAsXHJcbiAgICAgICAgeCA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFswLCB3XSksXHJcbiAgICAgICAgeSA9IGQzLnNjYWxlLmxpbmVhcigpLnJhbmdlKFswLCBoXSksXHJcbiAgICAgICAgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTIwYygpLFxyXG4gICAgICAgIHJvb3QgPSBbXSxcclxuICAgICAgICBub2RlID0gW10sXHJcbiAgICAgICAgY2hhcnQsXHJcbiAgICAgICAgdHJlZW1hcCxcclxuICAgICAgICBzdmc7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJ0cmVlbWFwVGl0bGVcIixcclxuICAgICAgICAgICAgZGVzYzogXCJ0cmVlbWFwRGVzY1wiLFxyXG4gICAgICAgICAgICB0cmVlbWFwSWQ6IFwiI3RyZWVtYXBJZFwiXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmVlbWFwSWQgPSB0aGlzLnNldHRpbmdzLnRyZWVtYXBJZDtcclxuXHJcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiN0cmVlbWFwVGl0bGVcIikudGV4dCh0aGlzLnNldHRpbmdzLnRpdGxlKTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI3RyZWVtYXBEZXNjXCIpLnRleHQodGhpcy5zZXR0aW5ncy5kZXNjKTtcclxuXHJcbiAgICAgICAgICAgIGNoYXJ0ID0gZDMuc2VsZWN0KHRyZWVtYXBJZCkuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY2hhcnRcIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHcgKyBcInB4XCIpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgaCArIFwicHhcIilcclxuXHJcbiAgICAgICAgICAgIHN2ZyA9IGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC41LC41KVwiKTtcclxuXHJcbiAgICAgICAgICAgIHRyZWVtYXAgPSBkMy5sYXlvdXQudHJlZW1hcCgpXHJcbiAgICAgICAgICAgICAgICAvLyAucm91bmQoZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAuc2l6ZShbdywgaF0pXHJcbiAgICAgICAgICAgICAgICAvLyAuc3RpY2t5KGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgLnZhbHVlKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC53YXRjaGVyc19jb3VudDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgc2hvd0NoYXJ0KGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaG93Q2hhcnQoZGF0YSkge1xyXG4gICAgICAgIG5vZGUgPSByb290ID0gVXRpbHMuZ2V0VHJlZURhdGEoZGF0YSk7XHJcblxyXG4gICAgICAgIHZhciBub2RlcyA9IHRyZWVtYXAubm9kZXMocm9vdClcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWQuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgY2VsbCA9IHN2Zy5zZWxlY3RBbGwoXCJnXCIpXHJcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZC53YXRjaGVyc19jb3VudDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNlbGxcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHpvb20obm9kZSA9PSBkLnBhcmVudCA/IHJvb3QgOiBkLnBhcmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjZWxsLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5keCAtIDE7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkLmR5IC0gMTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IoZC5wYXJlbnQubmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjZWxsLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAyICogZC5keCAvIDMgKyAyMDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkLmR5IC8gMjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubmFtZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICBkLncgPSB0aGlzLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gZC5keCA+IGQudyA/IDEgOiAwO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcImdcIilcclxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXHJcbiAgICAgICAgICAgIC5leGl0KClcclxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAuc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIGQzLnNlbGVjdCh3aW5kb3cpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHpvb20ocm9vdCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGQzLnNlbGVjdChcIiN0cmVlbWFwU2VsZWN0XCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0cmVlbWFwLnZhbHVlKHRoaXMudmFsdWUgPT0gXCJ3YXRjaGVyc1wiID8gd2F0Y2hlcnNDb3VudCA6IGZvcmtzQ291bnQpLm5vZGVzKHJvb3QpO1xyXG4gICAgICAgICAgICB6b29tKG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdhdGNoZXJzQ291bnQoZCkge1xyXG4gICAgICAgIHJldHVybiBkLndhdGNoZXJzX2NvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvcmtzQ291bnQoZCkge1xyXG4gICAgICAgIHJldHVybiBkLmZvcmtzX2NvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHpvb20oZCkge1xyXG4gICAgICAgIHZhciBreCA9IHcgLyBkLmR4LFxyXG4gICAgICAgICAgICBreSA9IGggLyBkLmR5O1xyXG4gICAgICAgIHguZG9tYWluKFtkLngsIGQueCArIGQuZHhdKTtcclxuICAgICAgICB5LmRvbWFpbihbZC55LCBkLnkgKyBkLmR5XSk7XHJcblxyXG4gICAgICAgIHZhciB0ID0gc3ZnLnNlbGVjdEFsbChcImcuY2VsbFwiKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgLmR1cmF0aW9uKGQzLmV2ZW50LmFsdEtleSA/IDc1MDAgOiA3NTApXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgoZC54KSArIFwiLFwiICsgeShkLnkpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0LnNlbGVjdChcInJlY3RcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga3ggKiBkLmR4IC0gMTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGt5ICogZC5keSAtIDE7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIHQuc2VsZWN0KFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgKiBreCAqIGQuZHggLyAzICsgMjA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga3kgKiBkLmR5IC8gMjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiBreCAqIGQuZHggPiBkLncgPyAxIDogMDtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5vZGUgPSBkO1xyXG4gICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxufSgpKVxyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbG9hZGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWxcIik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2hcclxuICAgICAqL1xyXG4gICAgU2VhcmNoZXIuaW5pdCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogc3RhcnQgQmFyQ2hhcnRcclxuICAgICAqL1xyXG4gICAgQmFyLnNldHRpbmdzID0ge1xyXG4gICAgICAgIHRpdGxlOiBcIlRvcDEwMCBCYXJDaGFydFwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhpcyBpcyBhIGdvb2QgZXhhbXBsZS5cIixcclxuICAgICAgICBiYXJJZDogXCIjYmFySWRcIlxyXG4gICAgfVxyXG4gICAgQmFyLmluaXQoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHN0YXJ0IHRyZWVtYXBcclxuICAgICAqL1xyXG4gICAgVHJlZW1hcC5zZXR0aW5ncyA9IHtcclxuICAgICAgICB0aXRsZTogXCJUb3AxMDAgdHJlZW1hcFwiLFxyXG4gICAgICAgIGRlc2M6IFwiWW91IGNhbiBjbGljayB0aGUgYmxvY2sgdG8gem9vbSBpdC5cIixcclxuICAgICAgICB0cmVlbWFwSWQ6IFwiI3NhY2RsVHJlZW1hcFwiXHJcbiAgICB9XHJcbiAgICBUcmVlbWFwLmluaXQoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzaG93KHVybCkge1xyXG4gICAgICAgIHZhciBsb2FkZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgfSwgMzAwKTtcclxuXHJcbiAgICAgICAgdXJsID0gdXJsIHx8ICdodHRwczovL2FwaS5naXRodWIuY29tL3NlYXJjaC9yZXBvc2l0b3JpZXM/cT1iaXRjb2luJnNvcnQ9Zm9ya3Mmb3JkZXI9ZGVzYyZwZXJfcGFnZT0xMDAnO1xyXG5cclxuICAgICAgICBkMy5qc29uKHVybCwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChsb2FkZXIpO1xyXG4gICAgICAgICAgICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIuWKoOi9veaVsOaNruWksei0pe+8jOivt+ajgOafpeaCqOeahOe9kee7nOiuvue9ruOAglwiKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgVXRpbHMuZ2V0RGF0YShkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIEJhci5zaG93KCk7XHJcbiAgICAgICAgICAgIFRyZWVtYXAuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxvYWRlcik7XHJcbiAgICAgICAgICAgIGxvYWRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNlYXJjaGVyLmFkZExpc3RlbmVyKGZ1bmN0aW9uKHVybCkge1xyXG4gICAgICAgIHNob3codXJsKTtcclxuICAgIH0pXHJcblxyXG4gICAgc2hvdygpO1xyXG59KSgpXHJcbiJdfQ==
